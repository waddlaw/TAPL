-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package lambda-untyped
@version 0.1.0.0

module Language.UntypedLambda.Types
data Term a
TmVar :: a -> Term a
TmLam :: VarName -> Term a -> Term a
TmApp :: Term a -> Term a -> Term a
type UntypedLambda = Term Text
(@@) :: UntypedLambda -> UntypedLambda -> UntypedLambda
infixl 9 @@
λ :: Text -> UntypedLambda -> UntypedLambda

-- | 教科書とは逆で ["x", "y", "z"] は [0, 1, 2] と左からインデックスを付ける
type Context = [VarName]
type VarName = Text
data NamelessTerm
NlTmVar :: Int -> NamelessTerm
NlTmLam :: NamelessTerm -> NamelessTerm
NlTmApp :: NamelessTerm -> NamelessTerm -> NamelessTerm
getNlTermVar :: NamelessTerm -> Int
instance GHC.Show.Show a => GHC.Show.Show (Language.UntypedLambda.Types.Term a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Language.UntypedLambda.Types.Term a)
instance GHC.Show.Show Language.UntypedLambda.Types.NamelessTerm
instance GHC.Classes.Eq Language.UntypedLambda.Types.NamelessTerm
instance Data.Text.Prettyprint.Doc.Internal.Pretty Language.UntypedLambda.Types.UntypedLambda
instance Data.String.IsString Language.UntypedLambda.Types.UntypedLambda
instance Data.String.IsString Language.UntypedLambda.Types.NamelessTerm

module Language.UntypedLambda.Lib.Util
(.) :: (a -> b) -> a -> b
infixr 5 .

module Language.UntypedLambda.Lib.Bool

-- | λt. λf. t
tru :: UntypedLambda

-- | λt. λf. f
fls :: UntypedLambda

-- | λl. λm. λn. l m n
test :: UntypedLambda

-- | λb. λc. b c fls
and :: UntypedLambda

-- | λb. λc. b tru c
or :: UntypedLambda

-- | λb. b fls tru
not :: UntypedLambda
mkTest :: UntypedLambda -> UntypedLambda -> UntypedLambda -> UntypedLambda
mkAnd :: UntypedLambda -> UntypedLambda -> UntypedLambda
mkOr :: UntypedLambda -> UntypedLambda -> UntypedLambda
mkNot :: UntypedLambda -> UntypedLambda

module Language.UntypedLambda.Lib.Pair

-- | λf. λs. λb. b f s
pair :: UntypedLambda

-- | λp. p tru
fst :: UntypedLambda

-- | λp. p fls
snd :: UntypedLambda

-- | λf. λs. pair f s
mkPair :: UntypedLambda -> UntypedLambda -> UntypedLambda

module Language.UntypedLambda.Lib.Either
left :: UntypedLambda
right :: UntypedLambda
isLeft :: UntypedLambda

module Language.UntypedLambda.Lib.Base

-- | λx. x
id :: UntypedLambda

-- | λf. (λx. f (λy. x x y)) (λx. f (λy. x x y))
fix :: UntypedLambda
mkFix :: Text -> UntypedLambda -> UntypedLambda -> UntypedLambda -> UntypedLambda

module Language.UntypedLambda.Lib.Church

-- | c0 = λs. λz. z
--   
--   c1 = λs. λz. s z
--   
--   c2 = λs. λz. s (s z)
--   
--   c3 = λs. λz. s (s (s z))
c :: Int -> UntypedLambda

-- | λn. λs. λz. s (n s z)
scc :: UntypedLambda

-- | λm. λn. λs. λz. m s (n s z)
plus :: UntypedLambda

-- | λm. λn. m (plus n) c0
times :: UntypedLambda

-- | λm. m (λx. fls) tru
iszro :: UntypedLambda

-- | λm. fst (m ss zz)
prd :: UntypedLambda

-- | λn. λs. λz. n s (s z)
scc2 :: UntypedLambda

-- | λm. λn. λs. λz. m (n s) z
times2 :: UntypedLambda

-- | λm. λn. λs. m (n s)
times3 :: UntypedLambda

-- | λn. λm. m (times n) c1
--   
--   n^m
power1 :: UntypedLambda

-- | λn. λm. m n
--   
--   m^n
power2 :: UntypedLambda

-- | λm. λn. n prd m
subtract1 :: UntypedLambda

-- | λm. λn. and (iszro (m prd n)) (iszro (n prd m))
equal :: UntypedLambda

-- | match = iszro n base = λx. c1 rec = λx. times n (f (prd n))
factorial :: UntypedLambda
isone :: UntypedLambda
mkPlus :: UntypedLambda -> UntypedLambda -> UntypedLambda
mkTimes :: UntypedLambda -> UntypedLambda -> UntypedLambda
mkSubtract :: UntypedLambda -> UntypedLambda -> UntypedLambda
mkEqual :: UntypedLambda -> UntypedLambda -> UntypedLambda

module Language.UntypedLambda.Lib.NB

-- | Church ブール値をプリミティブなブール値に変換 λb. b true false
realbool :: UntypedLambda

-- | プリミティブなブール値を Church ブール値に変換 λb. test b tru fls TODO: fake
churchbool :: UntypedLambda

-- | プリミティブなブール値を返す equal λm. λn. equal m n true false
realeq :: UntypedLambda

-- | Church 数からプリミティブな数への変換 λm. m (λx. succ x) 0
realnat :: UntypedLambda

-- | プリミティブな自然数を、対応する Church 数に変換する関数 match = iszro m base = λx rec = scc n
--   (f (prd m)) | TODO: fake
churchnat :: UntypedLambda

module Language.UntypedLambda.Lib.List

-- | λc. λn. n
nil :: UntypedLambda

-- | λh. λt. λc. λn. c h (t c n)
cons :: UntypedLambda

-- | λl. l (λh. λt. fls) tru
isnil :: UntypedLambda

-- | λl. l (λh. λt. h) l
head :: UntypedLambda

-- | λl. fst (l cc nn)
tail :: UntypedLambda

-- | match = isnil l base = c0 rec = plus (head l) (f (tail l))
sumlist :: UntypedLambda

-- | λl. l plus c0
sumlist' :: UntypedLambda

module Language.UntypedLambda.Prelude
prelude :: Prelude UntypedLambda

module Language.UntypedLambda.Parser
runUlParser :: String -> Either String UntypedLambda

module Language.UntypedLambda.Lib.Int

-- | int = λb. λs. λz. z | λb. λs. λz. pair b (s z) 0 = λs. λz. z -1 = λs.
--   λz. pair fls (s z) +1 = λs. λz. pair tru (s z)
int :: Int -> UntypedLambda

-- | if isZero i then (True, 1) else if isNegative i then (fst i, prd (snd
--   i)) else (fst i, scc (snd i))
--   
--   λi. test (isZeroI i) (pair tru c1) (test (isPositiveI i) (pair (fst i)
--   (scc (snd i))) (pair (fst i) (prd (snd i))))
succI :: UntypedLambda

-- | match = iszro (fst p) base = snd p rec = succI (f (mkPair (prd (fst
--   p)) (snd p))
succNI :: UntypedLambda
plusI :: UntypedLambda

-- | λi. iszro (snd i)
isZeroI :: UntypedLambda

-- | λi. isone (snd i)
isAbsOneI :: UntypedLambda

module Language.UntypedLambda

-- | 与えられた項が閉じているかどうか判定する述語
--   
--   項が閉じている = 自由変数が無い
--   
--   閉じた項はコンビネータとも呼ばれる。
isClosed :: UntypedLambda -> Bool

-- | 正規順序戦略
reduceNormalOrder :: UntypedLambda -> UntypedLambda

-- | 名前呼び戦略
reduceCallByName :: UntypedLambda -> UntypedLambda

-- | 値呼び戦略
reduceCallByValue :: UntypedLambda -> UntypedLambda

-- | 指定された評価戦略で項を正規系に評価する
eval :: Strategy -> UntypedLambda -> UntypedLambda

-- | 簡約ステップ列を返す
evalWithTrace :: Strategy -> [UntypedLambda] -> UntypedLambda -> [UntypedLambda]

-- | 1ステップのみ、指定された評価戦略で評価する
evalOneStep :: Strategy -> UntypedLambda -> UntypedLambda

-- | デバッグ用
trace :: Strategy -> UntypedLambda -> [UntypedLambda]

-- | 簡約ステップ数を返す
steps :: UntypedLambda -> Int

-- | β-reduction
--   
--   定義5.3.5 (P.54)
subst :: Text -> UntypedLambda -> UntypedLambda -> UntypedLambda

-- | 項のサイズを計算する
--   
--   演習5.3.3 (P.52)
size :: UntypedLambda -> Int

-- | 演習6.1.5 (P.59)
--   
--   仮定: FV(t) ⊆ dom(Γ）)
removenames :: Context -> UntypedLambda -> NamelessTerm

-- | 演習6.1.5 (P.59)
--   
--   仮定1: Γに含まれる名前は互いに異なる 仮定2: 変数名の集合Vは順序付けられている
restorenames :: Context -> NamelessTerm -> UntypedLambda

-- | 定義6.2.1 (P.60)
--   
--   c: 打ち切り値
--   
--   d: シフト数
shift :: Int -> Int -> NamelessTerm -> NamelessTerm

-- | 定義6.2.4 (P.60)
namelessSubst :: Int -> NamelessTerm -> NamelessTerm -> NamelessTerm

-- | 名前無し項のβ簡約 (値呼び)
reduceNameless :: NamelessTerm -> NamelessTerm

module Language.UntypedLambda.Examples

-- | s t u
example1 :: UntypedLambda

-- | λx. (λy. ((x y) x))
example2 :: UntypedLambda

-- | (λx.x) ((λx.x) (λz. (λx.x) z))
example3 :: UntypedLambda

-- | (λx.x) x
example4 :: UntypedLambda

-- | λz. λx. λy. x (y z)
example5 :: UntypedLambda

-- | (λx. x (λx. x)) (u r)
example6 :: UntypedLambda

-- | test tru tru fls
example7 :: UntypedLambda

-- | and tru tru
example8 :: UntypedLambda

-- | and tru fls
example9 :: UntypedLambda

-- | fst (pair v w)
example10 :: UntypedLambda

-- | <ul>
--   <li><i>x</i></li>
--   </ul>
example11 :: UntypedLambda
