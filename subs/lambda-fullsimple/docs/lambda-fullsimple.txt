-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/waddlaw/TAPL#readme</a>
@package lambda-fullsimple
@version 0.1.0.0

module Language.FullSimpleLambda.Types
data Ty

-- | 関数型
TyArr :: Ty -> Ty -> Ty

-- | ブール値型
TyBool :: Ty

-- | 自然数型
TyNat :: Ty

-- | <ol>
--   <li>2 Unit型</li>
--   </ol>
TyUnit :: Ty

-- | <ol>
--   <li>6 直積型</li>
--   </ol>
TyProd :: Ty -> Ty -> Ty

-- | <ol>
--   <li>7 組の型</li>
--   </ol>
TyTuple :: [Ty] -> Ty

-- | <ol>
--   <li>8 レコードの型</li>
--   </ol>
TyRecord :: [(FieldLabel, Ty)] -> Ty
data Term
TmVar :: Int -> Term
TmLam :: VarName -> Ty -> Term -> Term
TmApp :: Term -> Term -> Term
TmTrue :: Term
TmFalse :: Term
TmIf :: Term -> Term -> Term -> Term
TmZero :: Term
TmSucc :: Term -> Term
TmPred :: Term -> Term
TmIsZero :: Term -> Term

-- | <ol>
--   <li>2 Unit 型</li>
--   </ol>
TmUnit :: Term

-- | <ol>
--   <li>3 逐次実行</li>
--   </ol>
TmSeq :: Term -> Term -> Term

-- | <ol>
--   <li>3 ワイルドカード</li>
--   </ol>
TmWildcard :: Ty -> Term -> Term

-- | <ol>
--   <li>4 型指定</li>
--   </ol>
TmAscribe :: Term -> Ty -> Term

-- | <ol>
--   <li>5 let</li>
--   </ol>
TmLet :: VarName -> Term -> Term -> Term

-- | <ol>
--   <li>6 2つ組</li>
--   </ol>
TmPair :: Term -> Term -> Term

-- | <ol>
--   <li>6 第一要素の射影</li>
--   </ol>
TmPairFst :: Term -> Term

-- | <ol>
--   <li>6 第二要素の射影</li>
--   </ol>
TmPairSnd :: Term -> Term

-- | <ol>
--   <li>7 組</li>
--   </ol>
TmTuple :: [Term] -> Term

-- | <ol>
--   <li>7 組の射影</li>
--   </ol>
TmTupleProj :: Int -> Term -> Term

-- | <ol>
--   <li>8 レコード (フィールドの順序が異なれば、異なるレコードとして扱う)</li>
--   </ol>
TmRecord :: [(FieldLabel, Term)] -> Term

-- | <ol>
--   <li>8 レコードの射影</li>
--   </ol>
TmRecordProj :: FieldLabel -> Term -> Term

-- | <ol>
--   <li>8.2 パターンマッチ</li>
--   </ol>
TmPattern :: Pattern -> Term -> Term -> Term
type Value = Term " Term の部分集合"
data Context
data ContextType
VarContext :: Text -> ContextType
[unWrapVarContext] :: ContextType -> Text
PatternContext :: Pattern -> ContextType
addContext :: (ContextType, Binding) -> Context -> Context
unCtx :: Context -> [(ContextType, Binding)]
data Binding

-- | 自由変数
NameBind :: Binding

-- | 型付きの変数
VarBind :: Ty -> Binding

-- | 型付きのパターン
PatternBind :: Ty -> Binding
type FullSimpleTypedLambda = Term
pprFullSimple :: Context -> Term -> Doc ann
type VarName = Text

-- | ex 11.8.2 パターンマッチ
data Pattern

-- | 変数パターン
PtVar :: VarName -> Int -> Pattern

-- | レコードパターン
PtRecord :: [(FieldLabel, Pattern)] -> Pattern
type FieldLabel = Text " レコードのフィールドラベル"
instance GHC.Show.Show Language.FullSimpleLambda.Types.Context
instance GHC.Classes.Eq Language.FullSimpleLambda.Types.Context
instance GHC.Show.Show Language.FullSimpleLambda.Types.ContextType
instance GHC.Classes.Eq Language.FullSimpleLambda.Types.ContextType
instance GHC.Show.Show Language.FullSimpleLambda.Types.Term
instance GHC.Classes.Eq Language.FullSimpleLambda.Types.Term
instance GHC.Show.Show Language.FullSimpleLambda.Types.Pattern
instance GHC.Classes.Eq Language.FullSimpleLambda.Types.Pattern
instance GHC.Show.Show Language.FullSimpleLambda.Types.Binding
instance GHC.Classes.Eq Language.FullSimpleLambda.Types.Binding
instance GHC.Show.Show Language.FullSimpleLambda.Types.Ty
instance GHC.Classes.Eq Language.FullSimpleLambda.Types.Ty
instance GHC.Base.Semigroup Language.FullSimpleLambda.Types.Context
instance GHC.Base.Monoid Language.FullSimpleLambda.Types.Context
instance Data.String.IsString Language.FullSimpleLambda.Types.Context
instance Data.String.IsString Language.FullSimpleLambda.Types.ContextType
instance Data.Text.Prettyprint.Doc.Internal.Pretty Language.FullSimpleLambda.Types.ContextType
instance Data.Text.Prettyprint.Doc.Internal.Pretty Language.FullSimpleLambda.Types.Term
instance Data.Text.Prettyprint.Doc.Internal.Pretty Language.FullSimpleLambda.Types.Pattern
instance Data.Text.Prettyprint.Doc.Internal.Pretty Language.FullSimpleLambda.Types.Ty

module Language.FullSimpleLambda.TypeCheck
typeof :: Context -> Term -> Ty

module Language.FullSimpleLambda.Pretty
prettyFullSimpleText :: Context -> FullSimpleTypedLambda -> Text

module Language.FullSimpleLambda.Parser
runFullSimpleLambdaParser :: Context -> String -> Either String Term

module Language.FullSimpleLambda.Internal

-- | 与えられた項が値かどうか判定する述語
isValue :: Term -> Bool

-- | 与えられた項が数項かどうか判定
isNumericValue :: Term -> Bool

-- | 与えられた項がレコードかつ、値かどうか判定
isRecordValue :: Term -> Bool

module Language.FullSimpleLambda
typeof :: Context -> Term -> Ty

-- | 対象の構文
--   
--   TmSeq
--   
--   TmWildcard
desugar :: Term -> Term
eval :: Term -> Term
