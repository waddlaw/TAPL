-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package bool
@version 0.1.0.0

module Language.B.Types
data Term
TmTrue :: Term
TmFalse :: Term
TmIf :: Term -> Term -> Term -> Term
data Rule
E_IFTRUE :: Rule
E_IFFALSE :: Rule
E_IF :: Rule
newtype EvalRelation
EvalRelation :: (Term, Term) -> EvalRelation
[unwrap] :: EvalRelation -> (Term, Term)
type Premise = EvalRelation
type Conclusion = EvalRelation
instance GHC.Show.Show Language.B.Types.EvalRelation
instance GHC.Classes.Eq Language.B.Types.EvalRelation
instance GHC.Show.Show Language.B.Types.Rule
instance GHC.Enum.Bounded Language.B.Types.Rule
instance GHC.Enum.Enum Language.B.Types.Rule
instance GHC.Show.Show Language.B.Types.Term
instance GHC.Classes.Eq Language.B.Types.Term
instance Data.Text.Prettyprint.Doc.Internal.Pretty Language.B.Types.EvalRelation
instance Data.Text.Prettyprint.Doc.Internal.Pretty Language.B.Types.Rule
instance Data.Text.Prettyprint.Doc.Internal.Pretty Language.B.Types.Term

module Language.B.Parser
bparser :: String -> Either String EvalRelation
stepCmdParser :: String -> Either String Int

module Language.B.Example
example :: EvalRelation

module Language.B
deduce :: Rule -> Conclusion -> Maybe Premise
step :: Rule -> Maybe Premise -> Maybe Premise

-- | 項の評価関係
--   
--   評価関係 t -&gt; t' は「tが1ステップでt'に評価される」と読む
reduction :: Maybe Premise -> Term -> Term
